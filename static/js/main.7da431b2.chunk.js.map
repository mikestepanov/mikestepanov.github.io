{"version":3,"sources":["logo.svg","Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","useState","window","localStorage","getItem","username","setUsername","password","setPassword","confrimPassword","setConfirmPassword","isValidatingPassword","setIsValidatingPassword","isValidatingUsername","setiIsValidatingUsername","isPasswordValid","isUserNameValid","useEffect","className","htmlFor","width","id","value","onChange","e","setItem","target","type","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAe,I,2BC+FAA,MAtFf,WAAiB,IAAD,MACd,EAAgCC,mBAAQ,UAACC,OAAOC,aAAaC,QAAQ,mBAA7B,QAA4C,IAApF,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCL,mBAAQ,UAACC,OAAOC,aAAaC,QAAQ,mBAA7B,QAA4C,IAApF,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8CP,mBAAQ,UAACC,OAAOC,aAAaC,QAAQ,0BAA7B,QAAmD,IAAzG,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAAwDT,oBAAS,GAAjE,mBAAOU,EAAP,KAA6BC,EAA7B,KACA,EAAyDX,oBAAS,GAAlE,mBAAOY,EAAP,KAA6BC,EAA7B,KAEA,SAASC,IACP,OAAOR,IAAaE,GAAgC,KAAbF,EAGzC,SAASS,IACP,MAAoB,KAAbX,EAqDT,OAtBAY,qBAAU,WACJN,GAAwBI,KAC1BH,GAAwB,GAGtBD,GAAwBI,KAC1BH,GAAwB,GAGtBC,GAAwBG,KAC1BF,GAAyB,KAE1B,CAACT,EAAUE,EAAUE,IAWtB,sBAAKS,UAAU,OAAf,UACGP,GAAwB,uEACxBE,GAAwB,mDACzB,sBAAKK,UAAU,WAAf,UACE,uBAAOC,QAAQ,WAAf,sBACA,uBAAOC,MAAO,IAAKC,GAAG,WAAWC,MAAOjB,EAAUkB,SA5CxD,SAA8BC,GAC5BtB,OAAOC,aAAasB,QAAQ,WAAYD,EAAEE,OAAOJ,OACjDhB,EAAYkB,EAAEE,OAAOJ,aA4CnB,sBAAKJ,UAAU,WAAf,UACC,uBAAOC,QAAQ,WAAf,sBACA,uBAAOQ,KAAK,WAAWP,MAAO,IAAKC,GAAG,WAAWC,MAAOf,EAAUgB,SA3CvE,SAA8BC,GAC5BtB,OAAOC,aAAasB,QAAQ,WAAYD,EAAEE,OAAOJ,OACjDd,EAAYgB,EAAEE,OAAOJ,aA2CnB,sBAAKJ,UAAU,WAAf,UACE,uBAAOC,QAAQ,kBAAf,8BACA,uBAAOQ,KAAK,WAAWP,MAAO,IAAKC,GAAG,kBAAkBC,MAAOb,EAAiBc,SA1CtF,SAAqCC,GACnCtB,OAAOC,aAAasB,QAAQ,kBAAmBD,EAAEE,OAAOJ,OACxDZ,EAAmBc,EAAEE,OAAOJ,aA0C1B,uBAAOK,KAAK,SAASP,MAAO,IAAKE,MAAM,SAASM,QAxBpD,WAxCOZ,KAEHF,GAAyB,QAEtBC,KAEHH,GAAwB,MAoCxBN,EAAY,IACZE,EAAY,IACZE,EAAmB,YCvDVmB,MAXf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,yCACA,cAAC,EAAD,UCGOY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7da431b2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useState, useEffect} from 'react';\nimport './Form.css';\n\n// 1. create a form with 3 input fields, for the username, password and confirm password respectively\n// 2. persist the state of the input fields entries\n// 3. the password and confirm password input field should valid there entries by comparing both values\n// 4. output to the user when both field match or dont match\n// 5. bonus would be to style the form\n\nfunction Form() {\n  const [username, setUsername] = useState(window.localStorage.getItem('username') ?? '')\n  const [password, setPassword] = useState(window.localStorage.getItem('password') ?? '')\n  const [confrimPassword, setConfirmPassword] = useState(window.localStorage.getItem('confrimPassword') ?? '')\n  const [isValidatingPassword, setIsValidatingPassword] = useState(false)\n  const [isValidatingUsername, setiIsValidatingUsername] = useState(false)\n\n  function isPasswordValid() {\n    return password === confrimPassword && password !== ''\n  }\n\n  function isUserNameValid() {\n    return username !== ''\n  }\n\n  function isFormValid() {\n    let isValid = true\n    if (!isUserNameValid()) {\n      isValid = false\n      setiIsValidatingUsername(true)\n    }\n    if (!isPasswordValid()) {\n      isValid = false\n      setIsValidatingPassword(true)\n    }\n  }\n\n  function handleUsernameChange(e) {\n    window.localStorage.setItem('username', e.target.value)\n    setUsername(e.target.value)\n  }\n\n  function handlePasswordChange(e) {\n    window.localStorage.setItem('password', e.target.value)\n    setPassword(e.target.value)\n  }\n\n  function handleConfirmPasswordChange(e) {\n    window.localStorage.setItem('confirmPassword', e.target.value)\n    setConfirmPassword(e.target.value)\n  }\n\n\n  useEffect(() => {\n    if (isValidatingPassword && isPasswordValid()) {\n      setIsValidatingPassword(false)\n    }\n\n    if (isValidatingPassword && isPasswordValid()) {\n      setIsValidatingPassword(false)\n    }\n\n    if (isValidatingUsername && isUserNameValid()) {\n      setiIsValidatingUsername(false)\n    }\n  }, [username, password, confrimPassword])\n\n  function handleSubmitClick() {\n    if (isFormValid()) {\n      setUsername('')\n      setPassword('')\n      setConfirmPassword('')\n    }\n  }\n \n  return (\n    <div className=\"form\">\n      {isValidatingPassword && <h1>Password mismatch / Password is empty</h1>}\n      {isValidatingUsername && <h1>Username is empty</h1>}\n      <div className=\"formLine\">\n        <label htmlFor=\"username\">Username</label>\n        <input width={300} id=\"username\" value={username} onChange={handleUsernameChange} />\n      </div>\n      <div className=\"formLine\">\n       <label htmlFor=\"password\">Password</label>\n       <input type=\"password\" width={300} id=\"password\" value={password} onChange={handlePasswordChange}  />\n      </div>\n      <div className=\"formLine\">\n        <label htmlFor=\"confirm-pasword\">Confrim Password</label>\n        <input type=\"password\" width={300} id=\"confirm-pasword\" value={confrimPassword} onChange={handleConfirmPasswordChange}  />\n      </div>\n      <input type=\"submit\" width={300} value=\"Submit\" onClick={handleSubmitClick} />\n    </div>\n  );\n}\n\nexport default Form;\n","import logo from './logo.svg';\nimport './App.css';\nimport Form from './Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome!</p>\n        <Form />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}